# -*- coding: utf-8 -*-
"""goldwasser.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1rmo8syt74BAjeuh1aFHgAFCbOsay_Yw9
"""

import numpy as np
from random import randrange
import math


def BGW_enc(p, q, a, b, x, m):
    n = p * q
    print("n is:",n)

    # assert a*p + b*q == 1
    # assert p%4 == 3 and q%4 == 4

    # k = np.log2(n)
    h = math.ceil(np.log2(np.log2(n)))
    # h=3
    print("hi is",h)

    t = int(len(m) / h)
    r=randrange(n)
    # r=36
    x0=(r**2)%n
    xi = x0
    c = ''
    for i in range(t):
        mi = m[i*h:(i + 1)*h]
        xi = (xi ** 2) % n
        xi_bin = bin(xi)
        pi = xi_bin[-h:]

        mi_int = int(mi, 2)
        pi_int = int(pi, 2)

        ci = pi_int ^ mi_int
        ci_bin = format(ci, '0' + str(h) + 'b')
        c += ci_bin

    xt = (xi ** 2) % n
    return c, xt
        
    

def BGW_dec(p, q, a, b, xt, c):
    n = p * q
    
    
    
    h = math.ceil(np.log2(np.log2(n)))
    t = int(len(c) / h)
    
    d1 = (((p + 1) / 4)**(t + 1)) % (p - 1)
    d2 = (((q + 1) / 4)**(t + 1)) % (q - 1)
    
    print("Printinggggg",xt,d1,p)
    u = pow(int(xt),int(d1))%int(p)
    v = pow(int(xt),int(d2))%int(q)

    x0 = (v*a*p + u*b*q) % n

    xi = x0
    m = ''
    for i in range(t):
        ci = c[i*h:(i + 1)*h]
        xi = int((xi**2) % n)
        print("Value of xi is:",xi)
        xi_bin = bin(xi)
        pi = xi_bin[-h:]
        ci_int = int(ci, 2)
        pi_int = int(pi, 2)

        mi = pi_int ^ ci_int
        mi_bin = format(mi, '0' + str(h) + 'b')
        m += mi_bin

    return m



if __name__ == "__main__":
    m = '10000100000100101100'

    # m='1001'
    
    p = 499
    q = 547
    # p=19
    # q=7
    # n=p*q
    a = -57
    b = 52
    # a=3
    # b=-8
    x0 = 159201
    
    
    c, xt = BGW_enc(p, q, a, b, x0, m)
    print ("ciphertext:", c, "and x is",xt)
    d = BGW_dec(p, q, a, b, xt, c)
    
    print ("asserting that decrypted plaintext == m...")
    print('decrypted is {}'.format(d))
    
    if m==d:
      print ("assertion correct! done.")

